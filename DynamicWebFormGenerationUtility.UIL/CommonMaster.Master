<%@ master language="C#" autoeventwireup="true" codebehind="CommonMaster.master.cs" inherits="DynamicWebFormGenerationUtility.UIL.CommonMaster" %>

<!DOCTYPE html>


<html>
<head runat="server">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Form Generation Utility</title>
    <link rel="icon" href="~/images/favicon.ico" type="image/x-icon" />

    <script src="<%=ResolveClientUrl("~/js/jsCommonForAll.js")%>"></script>
    <script src="<%=ResolveClientUrl("~/Scripts/jquery-3.3.1.min.js")%>"></script>
    <script src="<%=ResolveClientUrl("~/Scripts/sweetalert.min.js")%>"></script>
    <link rel="stylesheet" href="~/Assets/bower_components/bootstrap/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="~/Assets/bower_components/font-awesome/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="~/Assets/bower_components/Ionicons/css/ionicons.min.css">
    <link href="~/Assets/bower_components/select2/dist/css/select2.min.css" rel="stylesheet" />
    <!-- Theme style -->
    <link rel="stylesheet" href="~/Assets/dist/css/AdminLTE.min.css">

    <link href="~/Assets/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <!-- AdminLTE Skins. Choose a skin from the css/skins
       folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="~/Assets/dist/css/skins/_all-skins.min.css">
    <link href="Assets/dist/css/skins/skin-green-light.css" rel="stylesheet" />
    <!-- Morris chart -->
    <link rel="stylesheet" href="~/Assets/bower_components/morris.js/morris.css">
    <!-- jvectormap -->
    <link rel="stylesheet" href="~/Assets/bower_components/jvectormap/jquery-jvectormap.css">
    <!-- Date Picker -->
    <link rel="stylesheet" href="~/Assets/bower_components/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css">
    <!-- Daterange picker -->
    <link rel="stylesheet" href="~/Assets/bower_components/bootstrap-daterangepicker/daterangepicker.css">
    <!-- bootstrap wysihtml5 - text editor -->
    <link rel="stylesheet" href="~/Assets/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.min.css">
    <%--<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">--%>
    <link href="~/Assets/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <link href="~/Styles/sweetalert.css" rel="stylesheet" />
    <link href="~/Assets/plugins/timepicker/bootstrap-timepicker.min.css" rel="stylesheet" />
    <style>
        /* PULSE */

        .form-control:focus {
            border-color: #2f98a3;
            box-shadow: 0px 1px 1px rgba(47, 152, 163, 1.0) inset, 0px 0px 8px rgba(47, 152, 163, 1.0);
        }

        .form-control {
            border-color: black !important;
        }

        .select2-container {
            border: 1px solid black !important;
        }

            .select2-container *:focus {
                border-color: #2f98a3 !important;
                box-shadow: 0px 1px 1px rgba(47, 152, 163, 1.0) inset, 0px 0px 8px rgba(47, 152, 163, 1.0) !important;
            }

        @-webkit-keyframes pulse {
            0% {
                -webkit-transform: scale(1.5);
                transform: scale(1.5);
            }

            50% {
                -webkit-transform: scale(1.0);
                transform: scale(1.0);
            }

            100% {
                -webkit-transform: scale(1.5);
                transform: scale(1.5);
            }
        }

        @keyframes pulse {
            0% {
                -webkit-transform: scale(1.5);
                -ms-transform: scale(1.5);
                transform: scale(1.5);
            }

            50% {
                -webkit-transform: scale(1.0);
                -ms-transform: scale(1.0);
                transform: scale(1.0);
            }

            100% {
                -webkit-transform: scale(1.5);
                -ms-transform: scale(1.5);
                transform: scale(1.5);
            }
        }

        .faa-pulse.animated,
        .faa-pulse.animated-hover:hover,
        .faa-parent.animated-hover:hover > .faa-pulse {
            -webkit-animation: pulse 2s linear infinite;
            animation: pulse 2s linear infinite;
        }


        .overflow-auto {
            overflow: auto;
        }

        .zeropadding {
            padding: 0 !important;
            padding: 0 0 !important;
            padding: 0 0 0 0 !important;
            padding-bottom: 0 !important;
            padding-left: 0 !important;
            padding-right: 0 !important;
            padding-top: 0 !important;
        }

        .padding-15 {
            padding-left: 15px !important;
            padding-right: 15px !important;
        }

        .table > thead > tr > th {
            vertical-align: top;
            /*background:#f9f9f9;*/
        }

        .select2-results__option .wrap:before {
            font-family: fontAwesome;
            color: #999;
            content: "\f096";
            width: 25px;
            height: 25px;
            padding-right: 10px;
        }

        .select2-results__option[aria-selected=true] .wrap:before {
            content: "\f14a";
        }

        .customMenuDropdownclass {
            background: #222d32;
            color: white;
            width: 180px;
        }
    </style>
    <style type="text/css">
        .UpperCase {
            text-transform: uppercase
        }
    </style>
    <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
    <link href="~/Assets/css/custom.css" rel="stylesheet" />
</head>
<body>


    <form id="form1" runat="server">
        <div class="wrapper skin-blue">
            <header class="main-header">
                <!-- Logo -->
                <a href="/Master/Dashboard.aspx" class="text logo" alt="Web Form Generation" title="Web Form Generation">
                    <!-- mini logo for sidebar mini 50x50 pixels -->
                    <span class="logo-mini">
                        <!-- logo for regular state and mobile devices -->
                        <span class="logo-lg">
                            <b style="vertical-align: middle;">DWFGU</b></span>
                </a>
                <!-- Header Navbar: style can be found in header.less -->
                <nav class="navbar navbar-static-top">
                    <!-- Sidebar toggle button-->
                    <a href="#" class="sidebar-toggle" data-toggle="push-menu" role="button">
                        <span class="sr-only">Toggle navigation</span>
                    </a>

                    <div class="navbar-custom-menu">
                        <ul class="nav navbar-nav">
                            <li></li>
                            <li style="padding: 8px 0;">
                                <!-- User Account: style can be found in dropdown.less -->
                                <li class="dropdown user user-menu">
                                    <%--  <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                        <img src="~/Assets/dist/img/user2-160x160.jpg" runat="server" id="image" visible="false" class="user-image" alt="User Image">
                                        <span class="hidden-xs">Welcome,
                                        <asp:Label runat="server" ID="lblUserName"></asp:Label></span>
                                    </a>--%>
                                    <ul class="dropdown-menu">
                                        <!-- User image -->
                                        <li class="user-header" runat="server" visible="false">
                                            <img src="~/Assets/dist/img/user2-160x160.jpg" runat="server" id="image1" visible="false" class="img-circle" alt="User Image">

                                            <p>
                                                <asp:Label runat="server" ID="lblDisplayName" Visible="true" Text="test"></asp:Label>
                                                <!-- <small>Member since Nov. 2012</small>-->
                                            </p>
                                        </li>
                                        <!-- Menu Body -->
                                        <li class="user-body" runat="server" visible="false">
                                            <!--<div class="row">
                  <div class="col-xs-4 text-center">
                    <a href="#"> </a>
                  </div>
                  <div class="col-xs-4 text-center">
                    <a href="#"> </a>
                  </div>
                  <div class="col-xs-4 text-center">
                    <a href="#"> </a>
                  </div>
                </div>-->
                                            <!-- /.row -->
                                        </li>
                                        <!-- Menu Footer-->
                                        <li class="user-footer">
                                            <div class="pull-left">
                                                <%--<a href="\Admin\ChangePassword.aspx" class="btn btn-default btn-flat">Change Password</a>--%>
                                            </div>
                                            <div class="pull-right">
                                            </div>
                                        </li>
                                    </ul>
                                </li>
                            <!-- Configuration Setting-->
                            <li><a href="ConfigurationForm.aspx">User Name: </a></li>
                            <li><a>
                                <asp:Label ID="txtUserName" runat="server"></asp:Label>
                            </a>
                            </li>
                            <li><a href="ConfigurationForm.aspx"><i class="fa fa-dashbrooard"></i>Role: </a></li>
                            <li><a>
                                <asp:Label ID="txtRoleName" runat="server"></asp:Label>
                                </a>
                            </li>
                            <li class="dropdown messages-menu">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Configuration Setting" alt="Configuration Setting">
                                    <i class="fa fa-star-o faa-pulse animated"></i>
                                    <!-- <span class="label label-success">4</span>-->
                                </a>
                                <ul class="dropdown-menu">
                                    <li class="user text-center" style="padding: 20px 0 10px; border-bottom: 1px solid rgba(0,0,0,.15); background: #f1f1f1; color: #555457;">
                                        <img src="~/Assets/images/Settings-icon.png" class="img-responsive center-block" />

                                        <h4>Configuration</h4>
                                    </li>
                                    <li></li>
                                    <li class="footer text-center" style="background: gray;">
                                </ul>
                            </li>
                            <li>
                                <a href="#" data-toggle="control-sidebar"><i class="fa fa-gears"></i></a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </header>
            <!-- Left side column. contains the logo and sidebar -->
            <aside class="main-sidebar">
                <!-- sidebar: style can be found in sidebar.less -->
                <section class="sidebar">

                    <ul class="sidebar-menu" data-widget="tree">
                        <li class="header">MAIN NAVIGATION</li>
                        <li>
                            <a href="FormMaster.aspx">
                                <i class="fa fa-th"></i><span>Form Master</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>

                        <li>
                            <a href="TemplateMaster.aspx">
                                <i class="fa fa-th"></i><span>Dropdown Template Master</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>

                        <li>
                            <a href="TemplateDataBinding.aspx">
                                <i class="fa fa-th"></i><span>Template Data Configuration</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>
                        <li>
                            <a href="RegexMaster.aspx">
                                <i class="fa fa-th"></i><span>Regex Master</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>
                        <li>
                            <a href="ConfigurationForm.aspx">
                                <i class="fa fa-th"></i><span>Form Configuration</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>
                        <%-- <li>
                            <a href="FormFilling.aspx">
                                <i class="fa fa-th"></i><span>Form Filling</span>
                                <span class="pull-right-container"></span>
                            </a>

                        </li>--%>
                        <li class="header">
                            <span>
                                <asp:DropDownList Width="180px" ID="ddlMenu" CssClass="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" AutoPostBack="true" OnSelectedIndexChanged="ddlMenu_SelectedIndexChanged" runat="server">
                                    <asp:ListItem Text="Fill Forms" Value="0"></asp:ListItem>
                                </asp:DropDownList>
                            </span>
                            <span class="pull-right-container"></span>


                        </li>
                        <li>
                            <a href="NewQueryGeneratedForm.aspx">
                                <i class="fa fa-th"></i><span>Query Builder</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>
                        <li>
                            <a href="SummaryQueryBuilder.aspx">
                                <i class="fa fa-th"></i><span>Summary Query Builder</span>
                                <span class="pull-right-container"></span>
                            </a>
                        </li>
                    </ul>
                </section>
                <!-- /.sidebar -->
            </aside>
            <!-- Content Wrapper. Contains page content -->
            <div class="content-wrapper">
                <!-- Content Header (Page header) -->
                <section class="content-header">
                    <h1>
                        <asp:ContentPlaceHolder ID="banner" runat="server">
                        </asp:ContentPlaceHolder>

                    </h1>

                    <%-- <ol class="breadcrumb" runat="server">
                        <li><a href="/Master/Dashboard.aspx"><i class="fa fa-dashboard"></i>Home</a></li>
                        <li><a href="/Master/Dashboard.aspx"><i class="fa fa-dashboard"></i>test </a></li>
                    </ol>--%>
                </section>
                <!-- Main content -->
                <section class="content">

                    <asp:ContentPlaceHolder ID="body" runat="server">
                    </asp:ContentPlaceHolder>


                </section>
                <!-- /.content -->
            </div>
            <!-- /.content-wrapper -->
            <footer class="main-footer">
                <div class="text-right  hidden-xs">
                    Design By <b><a href="https://www.nic.in/" target="_blank">NIC</a></b>
                </div>
            </footer>
            <!-- Control Sidebar -->
            <aside class="control-sidebar control-sidebar-dark">
                <!-- Create the tabs -->
                <ul class="nav nav-tabs nav-justified control-sidebar-tabs">
                    <li><a href="#control-sidebar-home-tab" data-toggle="tab"><i class="fa fa-home"></i></a></li>
                    <li><a href="#control-sidebar-settings-tab" data-toggle="tab"><i class="fa fa-gears"></i></a></li>
                </ul>
                <!-- Tab panes -->
                <div class="tab-content">
                    <!-- Home tab content -->
                    <div class="tab-pane" id="control-sidebar-home-tab">
                        <h3 class="control-sidebar-heading">Recent Activity</h3>
                        <ul class="control-sidebar-menu">
                            <li>
                                <a href="javascript:void(0)">
                                    <i class="menu-icon fa fa-birthday-cake bg-red"></i>

                                    <div class="menu-info">
                                        <h4 class="control-sidebar-subheading">Langdon's Birthday</h4>

                                        <p>Will be 23 on April 24th</p>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <i class="menu-icon fa fa-user bg-yellow"></i>

                                    <div class="menu-info">
                                        <h4 class="control-sidebar-subheading">Frodo Updated His Profile</h4>

                                        <p>New phone +1(800)555-1234</p>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <i class="menu-icon fa fa-envelope-o bg-light-blue"></i>
                                    <div class="menu-info">
                                        <h4 class="control-sidebar-subheading">Nora Joined Mailing List</h4>
                                        <p>nora@example.com</p>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <i class="menu-icon fa fa-file-code-o bg-green"></i>

                                    <div class="menu-info">
                                        <h4 class="control-sidebar-subheading">Cron Job 254 Executed</h4>
                                        <p>Execution time 5 seconds</p>
                                    </div>
                                </a>
                            </li>
                        </ul>
                        <!-- /.control-sidebar-menu -->

                        <h3 class="control-sidebar-heading">Tasks Progress</h3>
                        <ul class="control-sidebar-menu">
                            <li>
                                <a href="javascript:void(0)">
                                    <h4 class="control-sidebar-subheading">Custom Template Design
                <span class="label label-danger pull-right">70%</span>
                                    </h4>

                                    <div class="progress progress-xxs">
                                        <div class="progress-bar progress-bar-danger" style="width: 70%"></div>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <h4 class="control-sidebar-subheading">Update Resume
                <span class="label label-success pull-right">95%</span>
                                    </h4>

                                    <div class="progress progress-xxs">
                                        <div class="progress-bar progress-bar-success" style="width: 95%"></div>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <h4 class="control-sidebar-subheading">Laravel Integration
                <span class="label label-warning pull-right">50%</span>
                                    </h4>

                                    <div class="progress progress-xxs">
                                        <div class="progress-bar progress-bar-warning" style="width: 50%"></div>
                                    </div>
                                </a>
                            </li>
                            <li>
                                <a href="javascript:void(0)">
                                    <h4 class="control-sidebar-subheading">Back End Framework
                <span class="label label-primary pull-right">68%</span>
                                    </h4>
                                    <div class="progress progress-xxs">
                                        <div class="progress-bar progress-bar-primary" style="width: 68%"></div>
                                    </div>
                                </a>
                            </li>
                        </ul>
                        <!-- /.control-sidebar-menu -->

                    </div>
                    <!-- /.tab-pane -->
                    <!-- Stats tab content -->
                    <div class="tab-pane" id="control-sidebar-stats-tab">Stats Tab Content</div>
                    <!-- /.tab-pane -->
                    <!-- Settings tab content -->
                    <div class="tab-pane" id="control-sidebar-settings-tab">
                    </div>
                    <!-- /.tab-pane -->
                </div>
            </aside>
            <!-- /.control-sidebar -->
            <!-- Add the sidebar's background. This div must be placed
       immediately after the control sidebar -->
            <div class="control-sidebar-bg">
            </div>
        </div>
    </form>
    <!-- jQuery 3 -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/jquery/dist/jquery.min.js")%>"></script>
    <!-- jQuery UI 1.11.4 -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/jquery-ui/jquery-ui.min.js")%>"></script>
    <!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
    <script>
        $.widget.bridge('uibutton', $.ui.button);
    </script>
    <!-- Bootstrap 3.3.7 -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/bootstrap/dist/js/bootstrap.min.js")%>"></script>

    <!-- daterangepicker -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/moment/min/moment.min.js")%>"></script>

    <script src="<%=ResolveClientUrl("~/Assets/bower_components/bootstrap-daterangepicker/daterangepicker.js")%>"></script>
    <!-- datepicker -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js")%>"></script>
    <!-- Bootstrap WYSIHTML5 -->
    <script src="<%=ResolveClientUrl("~/Assets/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js")%>"></script>
    <!-- Slimscroll -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/jquery-slimscroll/jquery.slimscroll.min.js")%>"></script>
    <!-- FastClick -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/fastclick/lib/fastclick.js")%>"></script>
    <!-- AdminLTE App -->
    <script src="<%=ResolveClientUrl("~/Assets/dist/js/adminlte.min.js")%>"></script>
    <!-- AdminLTE dashboard demo (This is only for demo purposes) -->
    <script src="<%=ResolveClientUrl("~/Assets/dist/js/pages/dashboard.js")%>"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="<%=ResolveClientUrl("~/Assets/dist/js/demo.js")%>"></script>
    <!-- DataTables -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/datatables.net/js/jquery.dataTables.min.js")%>"></script>
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js")%>"></script>
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/select2/dist/js/select2.full.min.js")%>"></script>
    <script>
        $('.select2').select2()
    </script>
    <!-- bootstrap time picker -->


    <script src="~/Assets/plugins/timepicker/bootstrap-timepicker.min.js"></script>
    <script type="text/javascript">
        //Date picker
        $(document).ready(function () {
            $('.datepicker1').datepicker({
                autoclose: true,
                format: 'dd/mm/yyyy'
            })
            //Timepicker
            $('.timepicker').timepicker({
                format: 'hh:mm:ss',
                showInputs: false,
                minuteStep: 1,
                minDate: 0
            })
        });

        $('.onlyfuturedatepicker').datepicker({
            autoclose: true,
            startDate: new Date(),
            format: "dd/mm/yyyy",
            setDate: new Date()
        });

        $('.onlypastdatepicker').datepicker({
            autoclose: true,
            endDate: new Date(),
            format: "dd/mm/yyyy",
            setDate: new Date()
        });

        //$('.maxtoday').datetimepicker({
        //   maxDate: new Date(new Date().setDate(todayDate + 30))
        //});

        function CheckBoxValidate() {
            var isValid = $("#list input[type=checkbox]:checked").length > 0;
            if (!isValid) {
                swal("Oops!", "Please select at least one record to delete.")
                return false;
            }
            else {
                return confirm('Are you sure you want to delete selected records?');
            }
        }

    </script>

    <%--<script src="~/Assets/bower_components/jquery/dist/jquery.min.js"></script>--%>
    <!-- Bootstrap 3.3.7 -->
    <%--<script src="~/Assets/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>--%>
    <!-- DataTables -->
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/datatables.net/js/jquery.dataTables.min.js")%>"></script>
    <script src="<%=ResolveClientUrl("~/Assets/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js")%>"></script>
    <%-- <script>
            $(document).ready(function () {
                $('#example1').DataTable({
                    "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
                });
            });
            //$(document).ready(function () {

            
         
    </script>--%>



    <script>

        $(function () {
            $('.dtTbl').DataTable()
            $('#example2').DataTable({
                'destroy': true,
                'paging': true,
                'lengthChange': false,
                'searching': false,
                'ordering': true,
                'info': true,
                'autoWidth': false
            })
        })

        function openPopup(page, pagetitle) {
            $("#frame").attr("src", "~/student/applicantstatus.aspx");
            $("#modal-default").modal('show');
            $("#modal-default").addClass('in');


        }
        function unloadIframe() {
            $("#frame").attr("src", "");
        }

    </script>
    <script>


        $(function () {
            $('.dtTbCustom').DataTable({
                'paging': true,
                'lengthChange': true,
                'searching': true,
                'ordering': true,
                'info': true,
                'autoWidth': false,
                'lengthMenu': [[10, 25, 50, -1], [10, 25, 50, "All"]]
            })
        })

    </script>
    <script>

        !function ($) {
            "use strict";// jshint ;_;

            if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {
                ko.bindingHandlers.multiselect = {
                    after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],

                    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        var $element = $(element);
                        var config = ko.toJS(valueAccessor());

                        $element.multiselect(config);

                        if (allBindings.has('options')) {
                            var options = allBindings.get('options');
                            if (ko.isObservable(options)) {
                                ko.computed({
                                    read: function () {
                                        options();
                                        setTimeout(function () {
                                            var ms = $element.data('multiselect');
                                            if (ms)
                                                ms.updateOriginalOptions();//Not sure how beneficial this is.
                                            $element.multiselect('rebuild');
                                        }, 1);
                                    },
                                    disposeWhenNodeIsRemoved: element
                                });
                            }
                        }

                        //value and selectedOptions are two-way, so these will be triggered even by our own actions.
                        //It needs some way to tell if they are triggered because of us or because of outside change.
                        //It doesn't loop but it's a waste of processing.
                        if (allBindings.has('value')) {
                            var value = allBindings.get('value');
                            if (ko.isObservable(value)) {
                                ko.computed({
                                    read: function () {
                                        value();
                                        setTimeout(function () {
                                            $element.multiselect('refresh');
                                        }, 1);
                                    },
                                    disposeWhenNodeIsRemoved: element
                                }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                            }
                        }

                        //Switched from arrayChange subscription to general subscription using 'refresh'.
                        //Not sure performance is any better using 'select' and 'deselect'.
                        if (allBindings.has('selectedOptions')) {
                            var selectedOptions = allBindings.get('selectedOptions');
                            if (ko.isObservable(selectedOptions)) {
                                ko.computed({
                                    read: function () {
                                        selectedOptions();
                                        setTimeout(function () {
                                            $element.multiselect('refresh');
                                        }, 1);
                                    },
                                    disposeWhenNodeIsRemoved: element
                                }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                            }
                        }

                        var setEnabled = function (enable) {
                            setTimeout(function () {
                                if (enable)
                                    $element.multiselect('enable');
                                else
                                    $element.multiselect('disable');
                            });
                        };

                        if (allBindings.has('enable')) {
                            var enable = allBindings.get('enable');
                            if (ko.isObservable(enable)) {
                                ko.computed({
                                    read: function () {
                                        setEnabled(enable());
                                    },
                                    disposeWhenNodeIsRemoved: element
                                }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                            } else {
                                setEnabled(enable);
                            }
                        }

                        if (allBindings.has('disable')) {
                            var disable = allBindings.get('disable');
                            if (ko.isObservable(disable)) {
                                ko.computed({
                                    read: function () {
                                        setEnabled(!disable());
                                    },
                                    disposeWhenNodeIsRemoved: element
                                }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                            } else {
                                setEnabled(!disable);
                            }
                        }

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            $element.multiselect('destroy');
                        });
                    },

                    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        var $element = $(element);
                        var config = ko.toJS(valueAccessor());

                        $element.multiselect('setOptions', config);
                        $element.multiselect('rebuild');
                    }
                };
            }

            function forEach(array, callback) {
                for (var index = 0; index < array.length; ++index) {
                    callback(array[index], index);
                }
            }

            /**
             * Constructor to create a new multiselect using the given select.
             *
             * @param {jQuery} select
             * @param {Object} options
             * @returns {Multiselect}
             */
            function Multiselect(select, options) {

                this.$select = $(select);
                this.options = this.mergeOptions($.extend({}, options, this.$select.data()));

                // Placeholder via data attributes
                if (this.$select.attr("data-placeholder")) {
                    this.options.nonSelectedText = this.$select.data("placeholder");
                }

                // Initialization.
                // We have to clone to create a new reference.
                this.originalOptions = this.$select.clone()[0].options;
                this.query = '';
                this.searchTimeout = null;
                this.lastToggledInput = null;

                this.options.multiple = this.$select.attr('multiple') === "multiple";
                this.options.onChange = $.proxy(this.options.onChange, this);
                this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);
                this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);
                this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);
                this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);
                this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);
                this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);
                this.options.onInitialized = $.proxy(this.options.onInitialized, this);
                this.options.onFiltering = $.proxy(this.options.onFiltering, this);

                // Build select all if enabled.
                this.buildContainer();
                this.buildButton();
                this.buildDropdown();
                this.buildSelectAll();
                this.buildDropdownOptions();
                this.buildFilter();

                this.updateButtonText();
                this.updateSelectAll(true);

                if (this.options.enableClickableOptGroups && this.options.multiple) {
                    this.updateOptGroups();
                }

                this.options.wasDisabled = this.$select.prop('disabled');
                if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
                    this.disable();
                }

                this.$select.wrap('<span class="multiselect-native-select" />').after(this.$container);
                this.options.onInitialized(this.$select, this.$container);
            }

            Multiselect.prototype = {

                defaults: {
                    /**
                     * Default text function will either print 'None selected' in case no
                     * option is selected or a list of the selected options up to a length
                     * of 3 selected options.
                     *
                     * @param {jQuery} options
                     * @param {jQuery} select
                     * @returns {String}
                     */
                    buttonText: function (options, select) {
                        if (this.disabledText.length > 0
                            && (select.prop('disabled') || (options.length == 0 && this.disableIfEmpty))) {

                            return this.disabledText;
                        }
                        else if (options.length === 0) {
                            return this.nonSelectedText;
                        }
                        else if (this.allSelectedText
                            && options.length === $('option', $(select)).length
                            && $('option', $(select)).length !== 1
                            && this.multiple) {

                            if (this.selectAllNumber) {
                                return this.allSelectedText + ' (' + options.length + ')';
                            }
                            else {
                                return this.allSelectedText;
                            }
                        }
                        else if (options.length > this.numberDisplayed) {
                            return options.length + ' ' + this.nSelectedText;
                        }
                        else {
                            var selected = '';
                            var delimiter = this.delimiterText;

                            options.each(function () {
                                var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                                selected += label + delimiter;
                            });

                            return selected.substr(0, selected.length - this.delimiterText.length);
                        }
                    },
                    /**
                     * Updates the title of the button similar to the buttonText function.
                     *
                     * @param {jQuery} options
                     * @param {jQuery} select
                     * @returns {@exp;selected@call;substr}
                     */
                    buttonTitle: function (options, select) {
                        if (options.length === 0) {
                            return this.nonSelectedText;
                        }
                        else {
                            var selected = '';
                            var delimiter = this.delimiterText;

                            options.each(function () {
                                var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                                selected += label + delimiter;
                            });
                            return selected.substr(0, selected.length - this.delimiterText.length);
                        }
                    },
                    checkboxName: function (option) {
                        return false; // no checkbox name
                    },
                    /**
                     * Create a label.
                     *
                     * @param {jQuery} element
                     * @returns {String}
                     */
                    optionLabel: function (element) {
                        return $(element).attr('label') || $(element).text();
                    },
                    /**
                     * Create a class.
                     *
                     * @param {jQuery} element
                     * @returns {String}
                     */
                    optionClass: function (element) {
                        return $(element).attr('class') || '';
                    },
                    /**
                     * Triggered on change of the multiselect.
                     *
                     * Not triggered when selecting/deselecting options manually.
                     *
                     * @param {jQuery} option
                     * @param {Boolean} checked
                     */
                    onChange: function (option, checked) {

                    },
                    /**
                     * Triggered when the dropdown is shown.
                     *
                     * @param {jQuery} event
                     */
                    onDropdownShow: function (event) {

                    },
                    /**
                     * Triggered when the dropdown is hidden.
                     *
                     * @param {jQuery} event
                     */
                    onDropdownHide: function (event) {

                    },
                    /**
                     * Triggered after the dropdown is shown.
                     *
                     * @param {jQuery} event
                     */
                    onDropdownShown: function (event) {

                    },
                    /**
                     * Triggered after the dropdown is hidden.
                     *
                     * @param {jQuery} event
                     */
                    onDropdownHidden: function (event) {

                    },
                    /**
                     * Triggered on select all.
                     */
                    onSelectAll: function () {

                    },
                    /**
                     * Triggered on deselect all.
                     */
                    onDeselectAll: function () {

                    },
                    /**
                     * Triggered after initializing.
                     *
                     * @param {jQuery} $select
                     * @param {jQuery} $container
                     */
                    onInitialized: function ($select, $container) {

                    },
                    /**
                     * Triggered on filtering.
                     *
                     * @param {jQuery} $filter
                     */
                    onFiltering: function ($filter) {

                    },
                    enableHTML: false,
                    buttonClass: 'btn btn-default',
                    inheritClass: false,
                    buttonWidth: 'auto',
                    buttonContainer: '<div class="" />',
                    dropRight: false,
                    dropUp: false,
                    selectedClass: 'active',
                    // Maximum height of the dropdown menu.
                    // If maximum height is exceeded a scrollbar will be displayed.
                    maxHeight: false,
                    includeSelectAllOption: false,
                    includeSelectAllIfMoreThan: 0,
                    selectAllText: ' Select all',
                    selectAllValue: 'multiselect-all',
                    selectAllName: false,
                    selectAllNumber: true,
                    selectAllJustVisible: true,
                    enableFiltering: false,
                    enableCaseInsensitiveFiltering: false,
                    enableFullValueFiltering: false,
                    enableClickableOptGroups: false,
                    enableCollapsibleOptGroups: false,
                    filterPlaceholder: 'Search',
                    // possible options: 'text', 'value', 'both'
                    filterBehavior: 'text',
                    includeFilterClearBtn: true,
                    preventInputChangeEvent: false,
                    nonSelectedText: 'None selected',
                    nSelectedText: 'selected',
                    allSelectedText: 'All selected',
                    numberDisplayed: 3,
                    disableIfEmpty: false,
                    disabledText: '',
                    delimiterText: ', ',
                    templates: {
                        button: '<button type="button" class="multiselect dropdown-toggle btn-block text-left" data-toggle="dropdown"><span class="multiselect-selected-text"></span> <b class="caret"></b></button>',
                        ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                        filter: '<li class="multiselect-item multiselect-filter"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
                        filterClearBtn: '<span class="input-group-btn"><button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button></span>',
                        li: '<li><a tabindex="0"><label></label></a></li>',
                        divider: '<li class="multiselect-item divider"></li>',
                        liGroup: '<li class="multiselect-item multiselect-group"><label></label></li>'
                    }
                },

                constructor: Multiselect,

                /**
                 * Builds the container of the multiselect.
                 */
                buildContainer: function () {
                    this.$container = $(this.options.buttonContainer);
                    this.$container.on('show.bs.dropdown', this.options.onDropdownShow);
                    this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);
                    this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);
                    this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);
                },

                /**
                 * Builds the button of the multiselect.
                 */
                buildButton: function () {
                    this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);
                    if (this.$select.attr('class') && this.options.inheritClass) {
                        this.$button.addClass(this.$select.attr('class'));
                    }
                    // Adopt active state.
                    if (this.$select.prop('disabled')) {
                        this.disable();
                    }
                    else {
                        this.enable();
                    }

                    // Manually add button width if set.
                    if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {
                        this.$button.css({
                            'width': '100%', //this.options.buttonWidth,
                            'overflow': 'hidden',
                            'text-overflow': 'ellipsis'
                        });
                        this.$container.css({
                            'width': this.options.buttonWidth
                        });
                    }

                    // Keep the tab index from the select.
                    var tabindex = this.$select.attr('tabindex');
                    if (tabindex) {
                        this.$button.attr('tabindex', tabindex);
                    }

                    this.$container.prepend(this.$button);
                },

                /**
                 * Builds the ul representing the dropdown menu.
                 */
                buildDropdown: function () {

                    // Build ul.
                    this.$ul = $(this.options.templates.ul);

                    if (this.options.dropRight) {
                        this.$ul.addClass('pull-right');
                    }

                    // Set max height of dropdown menu to activate auto scrollbar.
                    if (this.options.maxHeight) {
                        // TODO: Add a class for this option to move the css declarations.
                        this.$ul.css({
                            'max-height': this.options.maxHeight + 'px',
                            'overflow-y': 'auto',
                            'overflow-x': 'hidden'
                        });
                    }

                    if (this.options.dropUp) {

                        var height = Math.min(this.options.maxHeight, $('option[data-role!="divider"]', this.$select).length * 26 + $('option[data-role="divider"]', this.$select).length * 19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));
                        var moveCalc = height + 34;

                        this.$ul.css({
                            'max-height': height + 'px',
                            'overflow-y': 'auto',
                            'overflow-x': 'hidden',
                            'margin-top': "-" + moveCalc + 'px'
                        });
                    }

                    this.$container.append(this.$ul);
                },

                /**
                 * Build the dropdown options and binds all necessary events.
                 *
                 * Uses createDivider and createOptionValue to create the necessary options.
                 */
                buildDropdownOptions: function () {

                    this.$select.children().each($.proxy(function (index, element) {

                        var $element = $(element);
                        // Support optgroups and options without a group simultaneously.
                        var tag = $element.prop('tagName')
                            .toLowerCase();

                        if ($element.prop('value') === this.options.selectAllValue) {
                            return;
                        }

                        if (tag === 'optgroup') {
                            this.createOptgroup(element);
                        }
                        else if (tag === 'option') {

                            if ($element.data('role') === 'divider') {
                                this.createDivider();
                            }
                            else {
                                this.createOptionValue(element);
                            }

                        }

                        // Other illegal tags will be ignored.
                    }, this));

                    // Bind the change event on the dropdown elements.
                    $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function (event) {
                        var $target = $(event.target);

                        var checked = $target.prop('checked') || false;
                        var isSelectAllOption = $target.val() === this.options.selectAllValue;

                        // Apply or unapply the configured selected class.
                        if (this.options.selectedClass) {
                            if (checked) {
                                $target.closest('li')
                                    .addClass(this.options.selectedClass);
                            }
                            else {
                                $target.closest('li')
                                    .removeClass(this.options.selectedClass);
                            }
                        }

                        // Get the corresponding option.
                        var value = $target.val();
                        var $option = this.getOptionByValue(value);

                        var $optionsNotThis = $('option', this.$select).not($option);
                        var $checkboxesNotThis = $('input', this.$container).not($target);

                        if (isSelectAllOption) {

                            if (checked) {
                                this.selectAll(this.options.selectAllJustVisible, true);
                            }
                            else {
                                this.deselectAll(this.options.selectAllJustVisible, true);
                            }
                        }
                        else {
                            if (checked) {
                                $option.prop('selected', true);

                                if (this.options.multiple) {
                                    // Simply select additional option.
                                    $option.prop('selected', true);
                                }
                                else {
                                    // Unselect all other options and corresponding checkboxes.
                                    if (this.options.selectedClass) {
                                        $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);
                                    }

                                    $($checkboxesNotThis).prop('checked', false);
                                    $optionsNotThis.prop('selected', false);

                                    // It's a single selection, so close.
                                    this.$button.click();
                                }

                                if (this.options.selectedClass === "active") {
                                    $optionsNotThis.closest("a").css("outline", "");
                                }
                            }
                            else {
                                // Unselect option.
                                $option.prop('selected', false);
                            }

                            // To prevent select all from firing onChange: #575
                            this.options.onChange($option, checked);

                            // Do not update select all or optgroups on select all change!
                            this.updateSelectAll();

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }
                        }

                        this.$select.change();
                        this.updateButtonText();

                        if (this.options.preventInputChangeEvent) {
                            return false;
                        }
                    }, this));

                    $('li a', this.$ul).on('mousedown', function (e) {
                        if (e.shiftKey) {
                            // Prevent selecting text by Shift+click
                            return false;
                        }
                    });

                    $('li a', this.$ul).on('touchstart click', $.proxy(function (event) {
                        event.stopPropagation();

                        var $target = $(event.target);

                        if (event.shiftKey && this.options.multiple) {
                            if ($target.is("label")) { // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)
                                event.preventDefault();
                                $target = $target.find("input");
                                $target.prop("checked", !$target.prop("checked"));
                            }
                            var checked = $target.prop('checked') || false;

                            if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range
                                var from = $target.closest("li").index();
                                var to = this.lastToggledInput.closest("li").index();

                                if (from > to) { // Swap the indices
                                    var tmp = to;
                                    to = from;
                                    from = tmp;
                                }

                                // Make sure we grab all elements since slice excludes the last index
                                ++to;

                                // Change the checkboxes and underlying options
                                var range = this.$ul.find("li").slice(from, to).find("input");

                                range.prop('checked', checked);

                                if (this.options.selectedClass) {
                                    range.closest('li')
                                        .toggleClass(this.options.selectedClass, checked);
                                }

                                for (var i = 0, j = range.length; i < j; i++) {
                                    var $checkbox = $(range[i]);

                                    var $option = this.getOptionByValue($checkbox.val());

                                    $option.prop('selected', checked);
                                }
                            }

                            // Trigger the select "change" event
                            $target.trigger("change");
                        }

                        // Remembers last clicked option
                        if ($target.is("input") && !$target.closest("li").is(".multiselect-item")) {
                            this.lastToggledInput = $target;
                        }

                        $target.blur();
                    }, this));

                    // Keyboard support.
                    this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function (event) {
                        if ($('input[type="text"]', this.$container).is(':focus')) {
                            return;
                        }

                        if (event.keyCode === 9 && this.$container.hasClass('open')) {
                            this.$button.click();
                        }
                        else {
                            var $items = $(this.$container).find("li:not(.divider):not(.disabled) a").filter(":visible");

                            if (!$items.length) {
                                return;
                            }

                            var index = $items.index($items.filter(':focus'));

                            // Navigation up.
                            if (event.keyCode === 38 && index > 0) {
                                index--;
                            }
                            // Navigate down.
                            else if (event.keyCode === 40 && index < $items.length - 1) {
                                index++;
                            }
                            else if (!~index) {
                                index = 0;
                            }

                            var $current = $items.eq(index);
                            $current.focus();

                            if (event.keyCode === 32 || event.keyCode === 13) {
                                var $checkbox = $current.find('input');

                                $checkbox.prop("checked", !$checkbox.prop("checked"));
                                $checkbox.change();
                            }

                            event.stopPropagation();
                            event.preventDefault();
                        }
                    }, this));

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        $("li.multiselect-group input", this.$ul).on("change", $.proxy(function (event) {
                            event.stopPropagation();

                            var $target = $(event.target);
                            var checked = $target.prop('checked') || false;

                            var $li = $(event.target).closest('li');
                            var $group = $li.nextUntil("li.multiselect-group")
                                .not('.multiselect-filter-hidden')
                                .not('.disabled');

                            var $inputs = $group.find("input");

                            var values = [];
                            var $options = [];

                            if (this.options.selectedClass) {
                                if (checked) {
                                    $li.addClass(this.options.selectedClass);
                                }
                                else {
                                    $li.removeClass(this.options.selectedClass);
                                }
                            }

                            $.each($inputs, $.proxy(function (index, input) {
                                var value = $(input).val();
                                var $option = this.getOptionByValue(value);

                                if (checked) {
                                    $(input).prop('checked', true);
                                    $(input).closest('li')
                                        .addClass(this.options.selectedClass);

                                    $option.prop('selected', true);
                                }
                                else {
                                    $(input).prop('checked', false);
                                    $(input).closest('li')
                                        .removeClass(this.options.selectedClass);

                                    $option.prop('selected', false);
                                }

                                $options.push(this.getOptionByValue(value));
                            }, this))

                            // Cannot use select or deselect here because it would call updateOptGroups again.

                            this.options.onChange($options, checked);

                            this.updateButtonText();
                            this.updateSelectAll();
                        }, this));
                    }

                    if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                        $("li.multiselect-group .caret-container", this.$ul).on("click", $.proxy(function (event) {
                            var $li = $(event.target).closest('li');
                            var $inputs = $li.nextUntil("li.multiselect-group")
                                .not('.multiselect-filter-hidden');

                            var visible = true;
                            $inputs.each(function () {
                                visible = visible && $(this).is(':visible');
                            });

                            if (visible) {
                                $inputs.hide()
                                    .addClass('multiselect-collapsible-hidden');
                            }
                            else {
                                $inputs.show()
                                    .removeClass('multiselect-collapsible-hidden');
                            }
                        }, this));

                        $("li.multiselect-all", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');
                        $("li.multiselect-all > a > label.checkbox", this.$ul).css('padding', '3px 20px 3px 35px');
                        $("li.multiselect-group > a > input", this.$ul).css('margin', '4px 0px 5px -20px');
                    }
                },

                /**
                 * Create an option using the given select option.
                 *
                 * @param {jQuery} element
                 */
                createOptionValue: function (element) {
                    var $element = $(element);
                    if ($element.is(':selected')) {
                        $element.prop('selected', true);
                    }

                    // Support the label attribute on options.
                    var label = this.options.optionLabel(element);
                    var classes = this.options.optionClass(element);
                    var value = $element.val();
                    var inputType = this.options.multiple ? "checkbox" : "radio";

                    var $li = $(this.options.templates.li);
                    var $label = $('label', $li);
                    $label.addClass(inputType);
                    $li.addClass(classes);

                    if (this.options.enableHTML) {
                        $label.html(" " + label);
                    }
                    else {
                        $label.text(" " + label);
                    }

                    var $checkbox = $('<input/>').attr('type', inputType);

                    var name = this.options.checkboxName($element);
                    if (name) {
                        $checkbox.attr('name', name);
                    }

                    $label.prepend($checkbox);

                    var selected = $element.prop('selected') || false;
                    $checkbox.val(value);

                    if (value === this.options.selectAllValue) {
                        $li.addClass("multiselect-item multiselect-all");
                        $checkbox.parent().parent()
                            .addClass('multiselect-all');
                    }

                    $label.attr('title', $element.attr('title'));

                    this.$ul.append($li);

                    if ($element.is(':disabled')) {
                        $checkbox.attr('disabled', 'disabled')
                            .prop('disabled', true)
                            .closest('a')
                            .attr("tabindex", "-1")
                            .closest('li')
                            .addClass('disabled');
                    }

                    $checkbox.prop('checked', selected);

                    if (selected && this.options.selectedClass) {
                        $checkbox.closest('li')
                            .addClass(this.options.selectedClass);
                    }
                },

                /**
                 * Creates a divider using the given select option.
                 *
                 * @param {jQuery} element
                 */
                createDivider: function (element) {
                    var $divider = $(this.options.templates.divider);
                    this.$ul.append($divider);
                },

                /**
                 * Creates an optgroup.
                 *
                 * @param {jQuery} group
                 */
                createOptgroup: function (group) {
                    var label = $(group).attr("label");
                    var value = $(group).attr("value");
                    var $li = $('<li class="multiselect-item multiselect-group"><a href="javascript:void(0);"><label><b></b></label></a></li>');

                    var classes = this.options.optionClass(group);
                    $li.addClass(classes);

                    if (this.options.enableHTML) {
                        $('label b', $li).html(" " + label);
                    }
                    else {
                        $('label b', $li).text(" " + label);
                    }

                    if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                        $('a', $li).append('<span class="caret-container"><b class="caret"></b></span>');
                    }

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        $('a label', $li).prepend('<input type="checkbox" value="' + value + '"/>');
                    }

                    if ($(group).is(':disabled')) {
                        $li.addClass('disabled');
                    }

                    this.$ul.append($li);

                    $("option", group).each($.proxy(function ($, group) {
                        this.createOptionValue(group);
                    }, this))
                },

                /**
                 * Build the select all.
                 *
                 * Checks if a select all has already been created.
                 */
                buildSelectAll: function () {
                    if (typeof this.options.selectAllValue === 'number') {
                        this.options.selectAllValue = this.options.selectAllValue.toString();
                    }

                    var alreadyHasSelectAll = this.hasSelectAll();

                    if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple
                        && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {

                        // Check whether to add a divider after the select all.
                        if (this.options.includeSelectAllDivider) {
                            this.$ul.prepend($(this.options.templates.divider));
                        }

                        var $li = $(this.options.templates.li);
                        $('label', $li).addClass("checkbox");

                        if (this.options.enableHTML) {
                            $('label', $li).html(" " + this.options.selectAllText);
                        }
                        else {
                            $('label', $li).text(" " + this.options.selectAllText);
                        }

                        if (this.options.selectAllName) {
                            $('label', $li).prepend('<input type="checkbox" name="' + this.options.selectAllName + '" />');
                        }
                        else {
                            $('label', $li).prepend('<input type="checkbox" />');
                        }

                        var $checkbox = $('input', $li);
                        $checkbox.val(this.options.selectAllValue);

                        $li.addClass("multiselect-item multiselect-all");
                        $checkbox.parent().parent()
                            .addClass('multiselect-all');

                        this.$ul.prepend($li);

                        $checkbox.prop('checked', false);
                    }
                },

                /**
                 * Builds the filter.
                 */
                buildFilter: function () {

                    // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.
                    if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {
                        var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);

                        if (this.$select.find('option').length >= enableFilterLength) {

                            this.$filter = $(this.options.templates.filter);
                            $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);

                            // Adds optional filter clear button
                            if (this.options.includeFilterClearBtn) {
                                var clearBtn = $(this.options.templates.filterClearBtn);
                                clearBtn.on('click', $.proxy(function (event) {
                                    clearTimeout(this.searchTimeout);

                                    this.$filter.find('.multiselect-search').val('');
                                    $('li', this.$ul).show().removeClass('multiselect-filter-hidden');

                                    this.updateSelectAll();

                                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                                        this.updateOptGroups();
                                    }

                                }, this));
                                this.$filter.find('.input-group').append(clearBtn);
                            }

                            this.$ul.prepend(this.$filter);

                            this.$filter.val(this.query).on('click', function (event) {
                                event.stopPropagation();
                            }).on('input keydown', $.proxy(function (event) {
                                // Cancel enter key default behaviour
                                if (event.which === 13) {
                                    event.preventDefault();
                                }

                                // This is useful to catch "keydown" events after the browser has updated the control.
                                clearTimeout(this.searchTimeout);

                                this.searchTimeout = this.asyncFunction($.proxy(function () {

                                    if (this.query !== event.target.value) {
                                        this.query = event.target.value;

                                        var currentGroup, currentGroupVisible;
                                        $.each($('li', this.$ul), $.proxy(function (index, element) {
                                            var value = $('input', element).length > 0 ? $('input', element).val() : "";
                                            var text = $('label', element).text();

                                            var filterCandidate = '';
                                            if ((this.options.filterBehavior === 'text')) {
                                                filterCandidate = text;
                                            }
                                            else if ((this.options.filterBehavior === 'value')) {
                                                filterCandidate = value;
                                            }
                                            else if (this.options.filterBehavior === 'both') {
                                                filterCandidate = text + '\n' + value;
                                            }

                                            if (value !== this.options.selectAllValue && text) {

                                                // By default lets assume that element is not
                                                // interesting for this search.
                                                var showElement = false;

                                                if (this.options.enableCaseInsensitiveFiltering) {
                                                    filterCandidate = filterCandidate.toLowerCase();
                                                    this.query = this.query.toLowerCase();
                                                }

                                                if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {
                                                    var valueToMatch = filterCandidate.trim().substring(0, this.query.length);
                                                    if (this.query.indexOf(valueToMatch) > -1) {
                                                        showElement = true;
                                                    }
                                                }
                                                else if (filterCandidate.indexOf(this.query) > -1) {
                                                    showElement = true;
                                                }

                                                // Toggle current element (group or group item) according to showElement boolean.
                                                $(element).toggle(showElement)
                                                    .toggleClass('multiselect-filter-hidden', !showElement);

                                                // Differentiate groups and group items.
                                                if ($(element).hasClass('multiselect-group')) {
                                                    // Remember group status.
                                                    currentGroup = element;
                                                    currentGroupVisible = showElement;
                                                }
                                                else {
                                                    // Show group name when at least one of its items is visible.
                                                    if (showElement) {
                                                        $(currentGroup).show()
                                                            .removeClass('multiselect-filter-hidden');
                                                    }

                                                    // Show all group items when group name satisfies filter.
                                                    if (!showElement && currentGroupVisible) {
                                                        $(element).show()
                                                            .removeClass('multiselect-filter-hidden');
                                                    }
                                                }
                                            }
                                        }, this));
                                    }

                                    this.updateSelectAll();

                                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                                        this.updateOptGroups();
                                    }

                                    this.options.onFiltering(event.target);

                                }, this), 300, this);
                            }, this));
                        }
                    }
                },

                /**
                 * Unbinds the whole plugin.
                 */
                destroy: function () {
                    this.$container.remove();
                    this.$select.show();

                    // reset original state
                    this.$select.prop('disabled', this.options.wasDisabled);

                    this.$select.data('multiselect', null);
                },

                /**
                 * Refreshs the multiselect based on the selected options of the select.
                 */
                refresh: function () {
                    var inputs = $.map($('li input', this.$ul), $);

                    $('option', this.$select).each($.proxy(function (index, element) {
                        var $elem = $(element);
                        var value = $elem.val();
                        var $input;
                        for (var i = inputs.length; 0 < i--; /**/) {
                            if (value !== ($input = inputs[i]).val())
                                continue; // wrong li

                            if ($elem.is(':selected')) {
                                $input.prop('checked', true);

                                if (this.options.selectedClass) {
                                    $input.closest('li')
                                        .addClass(this.options.selectedClass);
                                }
                            }
                            else {
                                $input.prop('checked', false);

                                if (this.options.selectedClass) {
                                    $input.closest('li')
                                        .removeClass(this.options.selectedClass);
                                }
                            }

                            if ($elem.is(":disabled")) {
                                $input.attr('disabled', 'disabled')
                                    .prop('disabled', true)
                                    .closest('li')
                                    .addClass('disabled');
                            }
                            else {
                                $input.prop('disabled', false)
                                    .closest('li')
                                    .removeClass('disabled');
                            }
                            break; // assumes unique values
                        }
                    }, this));

                    this.updateButtonText();
                    this.updateSelectAll();

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }
                },

                /**
                 * Select all options of the given values.
                 *
                 * If triggerOnChange is set to true, the on change event is triggered if
                 * and only if one value is passed.
                 *
                 * @param {Array} selectValues
                 * @param {Boolean} triggerOnChange
                 */
                select: function (selectValues, triggerOnChange) {
                    if (!$.isArray(selectValues)) {
                        selectValues = [selectValues];
                    }

                    for (var i = 0; i < selectValues.length; i++) {
                        var value = selectValues[i];

                        if (value === null || value === undefined) {
                            continue;
                        }

                        var $option = this.getOptionByValue(value);
                        var $checkbox = this.getInputByValue(value);

                        if ($option === undefined || $checkbox === undefined) {
                            continue;
                        }

                        if (!this.options.multiple) {
                            this.deselectAll(false);
                        }

                        if (this.options.selectedClass) {
                            $checkbox.closest('li')
                                .addClass(this.options.selectedClass);
                        }

                        $checkbox.prop('checked', true);
                        $option.prop('selected', true);

                        if (triggerOnChange) {
                            this.options.onChange($option, true);
                        }
                    }

                    this.updateButtonText();
                    this.updateSelectAll();

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }
                },

                /**
                 * Clears all selected items.
                 */
                clearSelection: function () {
                    this.deselectAll(false);
                    this.updateButtonText();
                    this.updateSelectAll();

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }
                },

                /**
                 * Deselects all options of the given values.
                 *
                 * If triggerOnChange is set to true, the on change event is triggered, if
                 * and only if one value is passed.
                 *
                 * @param {Array} deselectValues
                 * @param {Boolean} triggerOnChange
                 */
                deselect: function (deselectValues, triggerOnChange) {
                    if (!$.isArray(deselectValues)) {
                        deselectValues = [deselectValues];
                    }

                    for (var i = 0; i < deselectValues.length; i++) {
                        var value = deselectValues[i];

                        if (value === null || value === undefined) {
                            continue;
                        }

                        var $option = this.getOptionByValue(value);
                        var $checkbox = this.getInputByValue(value);

                        if ($option === undefined || $checkbox === undefined) {
                            continue;
                        }

                        if (this.options.selectedClass) {
                            $checkbox.closest('li')
                                .removeClass(this.options.selectedClass);
                        }

                        $checkbox.prop('checked', false);
                        $option.prop('selected', false);

                        if (triggerOnChange) {
                            this.options.onChange($option, false);
                        }
                    }

                    this.updateButtonText();
                    this.updateSelectAll();

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }
                },

                /**
                 * Selects all enabled & visible options.
                 *
                 * If justVisible is true or not specified, only visible options are selected.
                 *
                 * @param {Boolean} justVisible
                 * @param {Boolean} triggerOnSelectAll
                 */
                selectAll: function (justVisible, triggerOnSelectAll) {

                    var justVisible = typeof justVisible === 'undefined' ? true : justVisible;
                    var allLis = $("li:not(.divider):not(.disabled):not(.multiselect-group)", this.$ul);
                    var visibleLis = $("li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)", this.$ul).filter(':visible');

                    if (justVisible) {
                        $('input:enabled', visibleLis).prop('checked', true);
                        visibleLis.addClass(this.options.selectedClass);

                        $('input:enabled', visibleLis).each($.proxy(function (index, element) {
                            var value = $(element).val();
                            var option = this.getOptionByValue(value);
                            $(option).prop('selected', true);
                        }, this));
                    }
                    else {
                        $('input:enabled', allLis).prop('checked', true);
                        allLis.addClass(this.options.selectedClass);

                        $('input:enabled', allLis).each($.proxy(function (index, element) {
                            var value = $(element).val();
                            var option = this.getOptionByValue(value);
                            $(option).prop('selected', true);
                        }, this));
                    }

                    $('li input[value="' + this.options.selectAllValue + '"]', this.$ul).prop('checked', true);

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }

                    if (triggerOnSelectAll) {
                        this.options.onSelectAll();
                    }
                },

                /**
                 * Deselects all options.
                 *
                 * If justVisible is true or not specified, only visible options are deselected.
                 *
                 * @param {Boolean} justVisible
                 */
                deselectAll: function (justVisible, triggerOnDeselectAll) {

                    var justVisible = typeof justVisible === 'undefined' ? true : justVisible;
                    var allLis = $("li:not(.divider):not(.disabled):not(.multiselect-group)", this.$ul);
                    var visibleLis = $("li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)", this.$ul).filter(':visible');

                    if (justVisible) {
                        $('input[type="checkbox"]:enabled', visibleLis).prop('checked', false);
                        visibleLis.removeClass(this.options.selectedClass);

                        $('input[type="checkbox"]:enabled', visibleLis).each($.proxy(function (index, element) {
                            var value = $(element).val();
                            var option = this.getOptionByValue(value);
                            $(option).prop('selected', false);
                        }, this));
                    }
                    else {
                        $('input[type="checkbox"]:enabled', allLis).prop('checked', false);
                        allLis.removeClass(this.options.selectedClass);

                        $('input[type="checkbox"]:enabled', allLis).each($.proxy(function (index, element) {
                            var value = $(element).val();
                            var option = this.getOptionByValue(value);
                            $(option).prop('selected', false);
                        }, this));
                    }

                    $('li input[value="' + this.options.selectAllValue + '"]', this.$ul).prop('checked', false);

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }

                    if (triggerOnDeselectAll) {
                        this.options.onDeselectAll();
                    }
                },

                /**
                 * Rebuild the plugin.
                 *
                 * Rebuilds the dropdown, the filter and the select all option.
                 */
                rebuild: function () {
                    this.$ul.html('');

                    // Important to distinguish between radios and checkboxes.
                    this.options.multiple = this.$select.attr('multiple') === "multiple";

                    this.buildSelectAll();
                    this.buildDropdownOptions();
                    this.buildFilter();

                    this.updateButtonText();
                    this.updateSelectAll(true);

                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                        this.updateOptGroups();
                    }

                    if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
                        this.disable();
                    }
                    else {
                        this.enable();
                    }

                    if (this.options.dropRight) {
                        this.$ul.addClass('pull-right');
                    }
                },

                /**
                 * The provided data will be used to build the dropdown.
                 */
                dataprovider: function (dataprovider) {

                    var groupCounter = 0;
                    var $select = this.$select.empty();

                    $.each(dataprovider, function (index, option) {
                        var $tag;

                        if ($.isArray(option.children)) { // create optiongroup tag
                            groupCounter++;

                            $tag = $('<optgroup/>').attr({
                                label: option.label || 'Group ' + groupCounter,
                                disabled: !!option.disabled
                            });

                            forEach(option.children, function (subOption) { // add children option tags
                                var attributes = {
                                    value: subOption.value,
                                    label: subOption.label || subOption.value,
                                    title: subOption.title,
                                    selected: !!subOption.selected,
                                    disabled: !!subOption.disabled
                                };

                                //Loop through attributes object and add key-value for each attribute
                                for (var key in subOption.attributes) {
                                    attributes['data-' + key] = subOption.attributes[key];
                                }
                                //Append original attributes + new data attributes to option
                                $tag.append($('<option/>').attr(attributes));
                            });
                        }
                        else {

                            var attributes = {
                                'value': option.value,
                                'label': option.label || option.value,
                                'title': option.title,
                                'class': option.class,
                                'selected': !!option.selected,
                                'disabled': !!option.disabled
                            };
                            //Loop through attributes object and add key-value for each attribute
                            for (var key in option.attributes) {
                                attributes['data-' + key] = option.attributes[key];
                            }
                            //Append original attributes + new data attributes to option
                            $tag = $('<option/>').attr(attributes);

                            $tag.text(option.label || option.value);
                        }

                        $select.append($tag);
                    });

                    this.rebuild();
                },

                /**
                 * Enable the multiselect.
                 */
                enable: function () {
                    this.$select.prop('disabled', false);
                    this.$button.prop('disabled', false)
                        .removeClass('disabled');
                },

                /**
                 * Disable the multiselect.
                 */
                disable: function () {
                    this.$select.prop('disabled', true);
                    this.$button.prop('disabled', true)
                        .addClass('disabled');
                },

                /**
                 * Set the options.
                 *
                 * @param {Array} options
                 */
                setOptions: function (options) {
                    this.options = this.mergeOptions(options);
                },

                /**
                 * Merges the given options with the default options.
                 *
                 * @param {Array} options
                 * @returns {Array}
                 */
                mergeOptions: function (options) {
                    return $.extend(true, {}, this.defaults, this.options, options);
                },

                /**
                 * Checks whether a select all checkbox is present.
                 *
                 * @returns {Boolean}
                 */
                hasSelectAll: function () {
                    return $('li.multiselect-all', this.$ul).length > 0;
                },

                /**
                 * Update opt groups.
                 */
                updateOptGroups: function () {
                    var $groups = $('li.multiselect-group', this.$ul)
                    var selectedClass = this.options.selectedClass;

                    $groups.each(function () {
                        var $options = $(this).nextUntil('li.multiselect-group')
                            .not('.multiselect-filter-hidden')
                            .not('.disabled');

                        var checked = true;
                        $options.each(function () {
                            var $input = $('input', this);

                            if (!$input.prop('checked')) {
                                checked = false;
                            }
                        });

                        if (selectedClass) {
                            if (checked) {
                                $(this).addClass(selectedClass);
                            }
                            else {
                                $(this).removeClass(selectedClass);
                            }
                        }

                        $('input', this).prop('checked', checked);
                    });
                },

                /**
                 * Updates the select all checkbox based on the currently displayed and selected checkboxes.
                 */
                updateSelectAll: function (notTriggerOnSelectAll) {
                    if (this.hasSelectAll()) {
                        var allBoxes = $("li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled", this.$ul);
                        var allBoxesLength = allBoxes.length;
                        var checkedBoxesLength = allBoxes.filter(":checked").length;
                        var selectAllLi = $("li.multiselect-all", this.$ul);
                        var selectAllInput = selectAllLi.find("input");

                        if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {
                            selectAllInput.prop("checked", true);
                            selectAllLi.addClass(this.options.selectedClass);
                        }
                        else {
                            selectAllInput.prop("checked", false);
                            selectAllLi.removeClass(this.options.selectedClass);
                        }
                    }
                },

                /**
                 * Update the button text and its title based on the currently selected options.
                 */
                updateButtonText: function () {
                    var options = this.getSelected();

                    // First update the displayed button text.
                    if (this.options.enableHTML) {
                        $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));
                    }
                    else {
                        $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));
                    }

                    // Now update the title attribute of the button.
                    $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));
                },

                /**
                 * Get all selected options.
                 *
                 * @returns {jQUery}
                 */
                getSelected: function () {
                    return $('option', this.$select).filter(":selected");
                },

                /**
                 * Gets a select option by its value.
                 *
                 * @param {String} value
                 * @returns {jQuery}
                 */
                getOptionByValue: function (value) {

                    var options = $('option', this.$select);
                    var valueToCompare = value.toString();

                    for (var i = 0; i < options.length; i = i + 1) {
                        var option = options[i];
                        if (option.value === valueToCompare) {
                            return $(option);
                        }
                    }
                },

                /**
                 * Get the input (radio/checkbox) by its value.
                 *
                 * @param {String} value
                 * @returns {jQuery}
                 */
                getInputByValue: function (value) {

                    var checkboxes = $('li input:not(.multiselect-search)', this.$ul);
                    var valueToCompare = value.toString();

                    for (var i = 0; i < checkboxes.length; i = i + 1) {
                        var checkbox = checkboxes[i];
                        if (checkbox.value === valueToCompare) {
                            return $(checkbox);
                        }
                    }
                },

                /**
                 * Used for knockout integration.
                 */
                updateOriginalOptions: function () {
                    this.originalOptions = this.$select.clone()[0].options;
                },

                asyncFunction: function (callback, timeout, self) {
                    var args = Array.prototype.slice.call(arguments, 3);
                    return setTimeout(function () {
                        callback.apply(self || window, args);
                    }, timeout);
                },

                setAllSelectedText: function (allSelectedText) {
                    this.options.allSelectedText = allSelectedText;
                    this.updateButtonText();
                }
            };

            $.fn.multiselect = function (option, parameter, extraOptions) {
                return this.each(function () {
                    var data = $(this).data('multiselect');
                    var options = typeof option === 'object' && option;

                    // Initialize the multiselect.
                    if (!data) {
                        data = new Multiselect(this, options);
                        $(this).data('multiselect', data);
                    }

                    // Call multiselect method.
                    if (typeof option === 'string') {
                        data[option](parameter, extraOptions);

                        if (option === 'destroy') {
                            $(this).data('multiselect', false);
                        }
                    }
                });
            };

            $.fn.multiselect.Constructor = Multiselect;

            $(function () {
                $("select[data-role=multiselect]").multiselect();
            });

        }(window.jQuery);
        var html = $('#multiselect').html();

        $('.multiselect-ui').multiselect({
            includeSelectAllOption: true
        });

        $('#append-btn').click(function () {

            $(html).appendTo('.div2');
            $('.multiselect-ui').multiselect('rebuild')
        })
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            // Setup - add a text input to each footer cell
            $('#example1 thead tr').clone(true).appendTo('#example1 thead');
            $('#example1 thead tr:eq(1) th').each(function (i) {
                var title = $(this).text();

                //$(this).html($(this).text());
                //if (($(this).text().trim() != "") && ($(this).text() != "Edit") && ($(this).text() != "Export To Excel")) {
                if (($(this).text().trim() != "") && ($(this).text() != "Edit") && ($(this).text() != "Export To Excel")) {
                    $(this).html('<input type="text" placeholder="Search" style="width:' + $(this).width() + 'px;" />');
                }
                else {
                    $(this).html('<div></div>');
                }


                //var ishan = $(this).text() + ' : ' + $(this).width();


                $('input', this).on('keyup change', function () {
                    if (table.column(i).search() !== this.value) {
                        table
                            .column(i)
                            .search(this.value)
                            .draw();
                    }
                });
            });

            var table = $('#example1').DataTable({
                // orderCellsTop: true,
                "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
                //  "scrollY": 400,
                //"scrollX": true,
                fixedHeader: true,
                "deferRender": true,
                "processing": true,
                "paging": true
            });
        });
    </script>

    <script type="text/javascript">


        function chkSelectMulti(obj, aspCheckBoxID, aspCheckBoxAllID) {
            var checkVal = true;
            re = new RegExp(aspCheckBoxID + '$');
            re1 = new RegExp(aspCheckBoxAllID + '$');
            if (!obj.checked) {
                checkVal = false;
            }
            else {
                //for (i = 0; i < document.forms[0].elements.length; i++) {
                for (i = 0; i = 0; i++) {
                    elm1 = document.forms[0].elements[i]
                    if (elm1.type == 'checkbox') {
                        if (re.test(elm1.name)) {

                            if (!elm1.checked) {
                                checkVal = false;
                                break;
                            }
                        }
                    }
                }
            }
            for (i = 0; i < document.forms[0].elements.length; i++) {
                elm = document.forms[0].elements[i]
                if (elm.type == 'checkbox') {
                    if (!elm.disabled) {
                        if (re1.test(elm.name)) {
                            elm.checked = checkVal
                        }
                    }
                }
            }
        }

    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $(".numeric").keydown(function (event) {
                // Allow: backspace, delete, tab, escape, and enter
                if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 ||
                    // Allow: Ctrl+A
                    (event.keyCode == 65 && event.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (event.keyCode >= 35 && event.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                else {
                    // Ensure that it is a number and stop the keypress
                    if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                        event.preventDefault();
                    }
                }
            });
        });
    </script>
    <script src="~/js/bootstrap-datetimepicker.min.js"></script>
    <script type="text/javascript">
        $(function () {
            $('#datetimepicker1').datetimepicker();
            $('#datetimepicker2').datetimepicker();
        });
    </script>
    <script type="text/javascript">
        $(function () {
            $('#datetimepicker1').datetimepicker({
                language: 'en',
                pick12HourFormat: true

            });
            $('#datetimepicker2').datetimepicker({
                language: 'en',
                pick12HourFormat: true

            });
            $('#datetimepicker3').datetimepicker({
                language: 'en',
                pick12HourFormat: true

            });
            $('#datetimepicker4').datetimepicker({
                language: 'en',
                pick12HourFormat: true

            });
        });
    </script>
    <script>
        $('.collapse').on('shown.bs.collapse', function () {
            $(this).parent().find(".fa-plus").removeClass("fa-plus").addClass("fa-minus");
        }).on('hidden.bs.collapse', function () {
            $(this).parent().find(".fa-minus").removeClass("fa-minus").addClass("fa-plus");
        });

    </script>
</body>
</html>
